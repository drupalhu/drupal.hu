<?php

/**
 * @file
 * Drupal site checker.
 *
 * @author
 * CSÉCSY László <boobaa@kybest.hu>
 *
 * Checks if a given URL runs on Drupal. All sites will be checked every
 * 2 weeks by default; this interval can be set by issuing
 * variable_set('dhu_drupalcheck_interval', $seconds).
 */

/**
 * Checks if an URL runs on Drupal.
 *
 * @param string $url
 *   (Valid) URL that needs to be checked.
 *
 * @return bool
 *   TRUE if the URL runs on Drupal.
 */
function dhu_drupalcheck_check($url) {
  $result = drupal_http_request($url, array('method' => 'HEAD'));
  if (is_object($result) && isset($result->headers) && isset($result->headers['expires']) && ($result->headers['expires'] == 'Sun, 19 Nov 1978 05:00:00 GMT')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements of hook_menu().
 */
function dhu_drupalcheck_menu() {
  $items = array();
  $items['dhu_drupalchecker'] = array(
    'title' => 'Drupal site check',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dhu_drupalcheck_form_url'),
    'access arguments' => array('access content'),
  );
  $items['admin/content/link'] = array(
    'title' => 'Drupal site check results',
    'page callback' => 'dhu_drupalcheck_page_list',
    'access arguments' => array('edit any link content'),
  );
  $items['node/%node/unpublish/%'] = array(
    'title' => 'Unpublish site',
    'page callback' => 'dhu_drupalcheck_page_unpublish',
    'page arguments' => array(1),
    'access callback' => 'drupal_valid_token',
    'access arguments' => array(3, 'dhu_drupalcheck'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Form builder.
 */
function dhu_drupalcheck_form_url($form, &$form_state) {
  $form = array();
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to be checked'),
    '#default_value' => isset($form_state['values']['url']) ? $form_state['values']['url'] : '',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Displays the check result.
 */
function dhu_drupalcheck_form_url_submit($form, &$form_state) {
  if (dhu_drupalcheck_check($form_state['values']['url'])) {
    drupal_set_message(t('This URL belongs to a Drupal site.'));
  }
  else {
    drupal_set_message(t('This URL DOES NOT belong to a Drupal site.'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dhu_drupalcheck_form_link_node_form_alter(&$form, &$form_state) {
  $form['field_link']['und'][0]['#element_validate'][] = 'dhu_drupalcheck_form_link_node_form_alter_validate';
}

/**
 * Ensures that 'link' nodes point to Drupal sites.
 */
function dhu_drupalcheck_form_link_node_form_alter_validate($element, &$form_state, $form) {
  if (!dhu_drupalcheck_check($element['#value']['url'])) {
    form_error($element, t('This URL does not point to a Drupal site. We are accepting only Drupal sites. Sorry.'));
  }
}

/**
 * Implements hook_node_delete().
 */
function dhu_drupalcheck_node_delete($node) {
  if ($node->type == 'link') {
    db_delete('drupalcheck')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_insert().
 */
function dhu_drupalcheck_node_insert($node) {
  if ($node->type == 'link') {
    db_insert('drupalcheck')
      ->fields(array(
        'nid' => $node->nid,
        'lastcheck' => REQUEST_TIME,
      ))
      ->execute();
  }
}

/**
 * Checks if a 'link' node (still) runs on Drupal. If not, unpublishes it.
 *
 * @param int $nid
 *   Node ID that needs to be checked.
 */
function _dhu_drupalcheck_check_link_node($nid) {
  // Reset the node_load() cache to keep memory consumption down.
  $node = node_load($nid, NULL, FALSE);
  $is_drupal = dhu_drupalcheck_check($node->field_link['und'][0]['url']);
  if (!$is_drupal) {
    $node->status = 0;
    node_save($node);
    watchdog('drupal.hu link', '!url found not to be a Drupal site.', array('!url' => $node->field_link['und'][0]['url']));
  }
  // XXX: Should we watchdog a successful check?
  db_merge('drupalcheck')
    ->key(array('nid' => $node->nid))
    ->fields(array(
      'lastcheck' => REQUEST_TIME,
      'isdrupal' => $is_drupal ? 1 : 0,
    ))
    ->execute();
}

/**
 * Implements hook_cron().
 */
function dhu_drupalcheck_cron() {
  // Iterate through up to 20 sites per cron run. Check only those sites that
  // haven't been checked since at least two weeks (or haven't ever been
  // checked).
  $max_sites = 20;
  $nodes = db_query_range('SELECT n.nid AS nid
    FROM {node} n
    LEFT JOIN {drupalcheck} dc ON dc.nid = n.nid
    WHERE n.type = :type AND
    ((dc.lastcheck IS NULL) OR (dc.lastcheck < :time))
    ORDER BY dc.lastcheck', 0, $max_sites, array(
      ':type' => 'link',
      ':time' => REQUEST_TIME - 60 * 60 * 24 * 14,
    ))
    ->fetchAll();
  // watchdog('drupal.hu link', 'Checking d.hu links');
  foreach ($nodes as $node) {
    _dhu_drupalcheck_check_link_node($node->nid);
  }
}

/**
 * Lists the results of the automatic site checks.
 */
function dhu_drupalcheck_page_list() {
  $header = array(
    'title' => array('data' => t('Title'), 'field' => 'n.title'),
    'url' => array('data' => t('URL'), 'field' => 'fdf_link.field_link_url'),
    'lastcheck' => array('data' => t('Last check'), 'field' => 'dc.lastcheck'),
    'drupal' => array('data' => t('Is Drupal?'), 'field' => 'dc.isdrupal'),
    'status' => array('data' => t('Status'), 'field' => 'n.status'),
    'operations' => array(
      'data' => t('Operations'),
      'colspan' => 2,
    ),
  );
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->extend('TableSort');
  $link_alias = $query->innerJoin('field_data_field_link', 'fdf_link', '%alias.entity_id = n.nid');
  $query->addField($link_alias, 'field_link_url');
  $check_alias = $query->leftJoin('drupalcheck', 'dc', '%alias.nid = n.nid');
  $query->addField($check_alias, 'lastcheck');
  $query->addField($check_alias, 'isdrupal');
  $query->fields('n', array('title', 'nid', 'status'))
    ->condition('type', 'link')
    ->addTag('node_access')
    ->limit(50)
    ->orderByHeader($header);
  $result = $query->execute();
  $rows = array();
  foreach ($result as $row) {
    $rows[] = array(
      l(check_plain($row->title), 'node/' . $row->nid),
      l(t('Visit site'), $row->field_link_url),
      $row->lastcheck ? format_date($row->lastcheck) : t('never'),
      $row->lastcheck ? ($row->isdrupal ? t('Drupal') : t('Joomla or something')) : t('n/a'),
      $row->status ? t('Published') : t('Not published'),
      l(t('Edit'), 'node/' . $row->nid . '/edit'),
      l(t('Unpublish'), 'node/' . $row->nid . '/unpublish/' . drupal_get_token('dhu_drupalcheck'), array('query' => drupal_get_destination())),
    );
  }
  return array(
    'table' => array(
      '#markup' => theme('table', array('header' => $header, 'rows' => $rows)),
    ),
    'pager' => array(
      '#markup' => theme('pager'),
    ),
  );
}

/**
 * Unpublishes a link node.
 */
function dhu_drupalcheck_page_unpublish($node) {
  $node->status = 0;
  node_save($node);
  drupal_set_message(t('%url has been unpublished from Drupal.hu.', array(
        '%url' => $node->field_link['und'][0]['url'],
      )));
  drupal_goto();
}
