<?php
/**
 * Implements hook_init().
 * Intercepts certain requests and attempts to hotlink/download the remote
 * version.
 */
function stage_file_proxy_init() {
  // Make sure we're requesting a file in the files dir
  // Currently this only works for PUBLIC files
  $file_dir = _stage_file_proxy_file_dir();
  if (strpos($_GET['q'], $file_dir) !== 0) {
    return;
  }

  // Note if the origin server files location is different. This
  // must be the exact path for the remote site's public file
  // system path, and defaults to the local public file system path.
  $remote_file_dir = trim(variable_get('stage_file_proxy_origin_dir', $file_dir),'/');

  $relative_path = drupal_substr($_GET['q'], drupal_strlen($file_dir) + 1);

  // get origin server
  $server = variable_get('stage_file_proxy_origin', NULL);

  if ($server) {
    // is this an imagecache request? if so, request only the root file and let imagecache handle resizing
    if (variable_get('stage_file_proxy_use_imagecache_root', TRUE) && $original_path = _stage_file_proxy_image_style_path_original($relative_path, TRUE)) {
      $relative_path = $original_path;
      if (file_exists($file_dir . '/' . $relative_path)) {
        return; // imagecache can generate it without our help.
      }
    }

    $query_parameters = drupal_get_query_parameters();

    if (variable_get('stage_file_proxy_hotlink', FALSE)) {
      $location = url("$server/$remote_file_dir/$relative_path", array('query' => $query_parameters, 'absolute' => TRUE));
      header("Location: $location");
      exit;
    }
    elseif (_stage_file_proxy_fetch($server, $remote_file_dir, $relative_path)) {
      // Just refresh this request and let the web server work out the mime type, etc.
      $location = url("{$_GET['q']}", array('query' => $query_parameters));
      header("Location: $location");
      exit;
    }
    else {
      watchdog('stage_file_proxy', 'Stage File Proxy encountered an unknown error by retrieving file @file', array('@file' => $server . '/' . drupal_encode_path($remote_file_dir . '/' . $relative_path)), WATCHDOG_ERROR);
      drupal_not_found();
      exit;
    }
  }
}

/**
 * Downloads a remote file and saves it to the local files directory.
 *
 * @param string $server
 *   The origin server URL.
 * @param string $remote_file_dir
 *   The relative path to the files directory on the origin server.
 * @param string $relative_path
 *   The path to the requested resource relative to the files directory.
 *
 * @return bool
 */
function _stage_file_proxy_fetch($server, $remote_file_dir, $relative_path) {
  // Fetch remote file.
  $url = $server . '/' . drupal_encode_path($remote_file_dir . '/' . $relative_path);
  $response = drupal_http_request($url);
  if ($response->code == 200) {
    // Prepare local target directory and save downloaded file.
    $file_dir = _stage_file_proxy_file_dir();
    $target_dir = $file_dir . '/' . dirname($relative_path);
    if (file_prepare_directory($target_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      file_put_contents($file_dir . '/' . $relative_path, $response->data);
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper to retrieve the file directory
 */
function _stage_file_proxy_file_dir() {
  return variable_get('file_public_path', conf_path() . '/files');
}

/**
 * Helper to retrieves original path for a styled image.
 *
 * @param string $uri
 *   a uri or path (may be prefixed with scheme)
 * @param bool $style_only
 *   indicates if, the function should only return paths retrieved from style
 *   paths. Defaults to TRUE.
 * @return
 *   a path to the given original image
 *   if $style_only is set to TRUE and $uri is no style-path, FALSE is returned.
 */
function _stage_file_proxy_image_style_path_original($uri, $style_only = TRUE) {
  $scheme = file_uri_scheme($uri);
  if ($scheme) {
    $path = file_uri_target($uri);
  }
  else {
    $path = $uri;
    $scheme = file_default_scheme();
  }

  // It is a styles path, so we extract the different parts.
  if (strpos($path, 'styles') === 0) {
    // then the path is like styles/[style_name]/[schema]/[original_path]
    return preg_replace('/styles\/.*\/.*\/(.*)/U', '$1', $path);
  }
  // else it seems to be the original.
  elseif ($style_only == FALSE) {
    return $path;
  }
  else {
    return FALSE;
  }
}
