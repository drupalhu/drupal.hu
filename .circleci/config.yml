version: 2.1

orbs:
  codecov: 'codecov/codecov@3.2.4'
  browser-tools: 'circleci/browser-tools@1.4'

.env_mysql: &env_mysql
  MYSQL_ROOT_HOST: '%'
  MYSQL_ROOT_PASSWORD: 'root'
  MYSQL_USER: 'drupalhu'
  MYSQL_PASSWORD: 'drupalhu'
  MYSQL_HOST: 'database'
  MYSQL_PORT: '3306'
  MYSQL_DATABASE: 'drupalhu__default'
  MYSQL_DATABASE_LEGACY: 'drupalhu7__default'

.env_common: &env_common
  COLUMN: '110'
  BAT_PAGER: ''

.env_composer: &env_composer
  COMPOSER_NO_INTERACTION: '1'
  COMPOSER_MEMORY_LIMIT: '-1'
  COMPOSER_CACHE_DIR: '/home/circleci/.cache/composer'

.env_drush: &env_drush
  DRUSH_OPTIONS_PROGRESS_DELAY: '9999'
  DRUSH_OPTIONS_NO_INTERACTION: '1'

.env_node: &env_node
  YARN_CACHE_FOLDER: '/home/circleci/.cache/yarn/v6'

.env_app: &env_app
  APP_HASH_SALT: '04Wz1klfHuAtBZh9ufzsDL8YIKJ6rZYPMwWFI4unhDU7'
  APP_CHROME_HOST: '127.0.0.1'
  APP_CHROME_PORT: '9222'

  DTT_BASE_URL: 'http://localhost'

  appDrushExecutable: 'vendor/bin/drush --config=drush'
  appDrushSiteAlias: '@app.local'
  appDocroot: 'docroot'
  appInstallProfileName: 'appp'
  appSolrRootPassword: 'root'

.parameters:
  project_root: &parameter_project_root
    type: 'string'
    default: '.'
  solr_cores_dir: &parameter_solr_cores_dir
    type: 'string'
    default: './sites/default/solr/cores/'

executors:
  php_min:
    docker:
      - &docker_container_main
        name: 'main'
        image: 'cimg/php:8.1.16-browsers'
        environment:
          <<: *env_mysql
          <<: *env_common
          <<: *env_composer
          <<: *env_drush
          <<: *env_node
          <<: *env_app
        entrypoint: ['/bin/bash']

  php_min_with_services:
    docker:
      - *docker_container_main
      - &docker_container_database
        name: 'database'
        image: 'mysql:5.7.34'
        environment:
          <<: *env_mysql
      - &docker_container_solr
        name: 'solr'
        image: 'sweetchuck/solr:7.7.3'

commands:
  apt_get_update:
    description: 'Runs `apt-get update`, so the following tasks can use `apt-get install`'
    steps:
      -
        run:
          name: 'apt-get update'
          command: |-
            sudo apt-get update
      -
        run:
          name: 'apt-get install common packages'
          command: |-
            sudo apt-get install -y \
              bat \
              rsync \
              sshpass

  bash_env_init:
    # https://circleci.com/docs/env-vars/#parameters-and-bash-environment
    description: 'BASH_ENV initialize'
    steps:
      -
        run:
          name: 'BASH_ENV initialize – Setup calculated environment variables'
          command: |
            echo "export DTT_API_URL='http://${APP_CHROME_HOST}:${APP_CHROME_PORT}'" >> "${BASH_ENV}"
            echo "export SIMPLETEST_BASE_URL='${DTT_BASE_URL}'" >> "${BASH_ENV}"
            echo "export SIMPLETEST_DB='mysql://root:${MYSQL_ROOT_PASSWORD}@${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}'" >> "${BASH_ENV}"
            echo "export BROWSERTEST_OUTPUT_BASE_URL='${DTT_BASE_URL}'" >> "${BASH_ENV}"
            echo "[ ! -f ./.circleci/app.bash ] || . ./.circleci/app.bash" >> "${BASH_ENV}"

  php_extension_install:
    description: 'Install required PHP extensions'
    steps:
      -
        run:
          name: 'Install required PHP extensions – cache restore prepare'
          command: |-
            extDir="$(php -r 'echo ini_get("extension_dir");')"
            sudo chmod 0777 "${extDir}"
      -
        restore_cache:
          name: 'Install required PHP extensions – cache restore'
          keys:
            - 'php-extensions-{{ checksum "/etc/os-release" }}-1'
      -
        run:
          name: 'Install required PHP extensions – cache restore post process'
          command: |-
            extDir="$(php -r 'echo ini_get("extension_dir");')"
            sudo chmod 0755 "${extDir}"
            sudo chown --recursive root:root "${extDir}"
      -
        run:
          name: 'Install required PHP extensions – do it'
          command: |-
            appPhpExtensionInstall
      -
        save_cache:
          name: 'Install required PHP extensions – cache save'
          key: 'php-extensions-{{ checksum "/etc/os-release" }}-1'
          paths:
            - '/usr/local/lib/php/extensions/no-debug-non-zts-20210902/pcov.so'
            - '/usr/local/lib/php/extensions/no-debug-non-zts-20210902/yaml.so'

  git_config:
    description: 'Git config'
    steps:
      -
        run:
          name: 'Git config'
          command: |-
            git config --global 'user.email'            'circleci@drupal.hu'
            git config --global 'user.name'             "CircleCI ${CIRCLE_USERNAME}"
            git config --global 'log.date'              'iso'
            git config --global 'color.diff.plain'      'normal'
            git config --global 'color.diff.meta'       'yellow normal bold'
            git config --global 'color.diff.frag'       'magenta normal bold'
            git config --global 'color.diff.old'        'red'
            git config --global 'color.diff.new'        'green'
            git config --global 'color.diff.commit'     'white  blue'
            git config --global 'color.diff.whitespace' 'normal cyan'

  composer_install:
    description: 'Composer install'
    steps:
      -
        restore_cache:
          name: 'Composer install – cache restore'
          keys:
            - 'composer-{{ checksum "./composer.lock" }}-4'
      -
        run:
          name: 'Composer install – execute'
          command: >
            composer install --no-progress
      -
        save_cache:
          name: 'Composer install – cache save'
          key: 'composer-{{ checksum "./composer.lock" }}-4'
          paths:
            - '/home/circleci/.cache/composer/'

  main_instance_onboarding:
    description: ''
    steps:
      -
        run:
          name: 'Main instance onboarding – app:onboarding'
          command: |-
            appMarvinOnboarding \
              "${PWD}" \
              "${appDrushSiteAlias}"
      -
        run:
          name: 'Main instance onboarding – debug'
          command: |-
            appDebugConfigFiles

  main_instance_build:
    description: 'Main instance build'
    steps:
      -
        run:
          name: 'Main instance build – Calculate checksum of NPM tools'
          command: |-
            # Collect all the checksum of yarn.lock files into one file.
            echo -n '' > 'checksum-of-frontend-asset-sources.sha256'
            git ls-files -- '**/yarn.lock' | xargs sha256sum >> 'checksum-of-frontend-asset-sources.sha256'
      -
        restore_cache:
          name: 'Main instance build – NPM – cache restore'
          keys:
            - 'npm-{{ checksum "checksum-of-frontend-asset-sources.sha256" }}-2'
      -
        run:
          name: 'Main instance build – drush app:build'
          command: |-
            ${appDrushExecutable} app:build
      -
        save_cache:
          name: 'Main instance build – NPM – cache save'
          key: 'npm-{{ checksum "checksum-of-frontend-asset-sources.sha256" }}-2'
          paths:
            - '/home/circleci/.cache/yarn/v6'

  test_lint:
    description: 'Run linters'
    steps:
      -
        run:
          name: 'Run linters'
          command: >-
            ${appDrushExecutable} app:lint

  test_unit:
    description: 'Test – Unit'
    steps:
      -
        run:
          name: 'Test – Unit – execute'
          command: |-
            "$(composer config bin-dir)/phpunit" --testsuite='unit'
      -
        store_test_results:
          name: 'Test – Unit – Store unit test results'
          path: './reports/machine/junit'
      -
        codecov/upload:
          flags: 'unit'
          file: './reports/machine/coverage/phpunit.clover.xml'
          # https://github.com/codecov/codecov-circleci-orb/issues/148
          #validate: false

  artifact_acquia_build:
    description: 'Build an Acquia specific release artifact'
    steps:
      -
        run:
          name: 'Build an Acquia specific release artifact'
          command: |-
            ${appDrushExecutable} app:artifact:build:acquia
      -
        persist_to_workspace:
          name: 'Store the release artifact'
          root: './artifacts'
          paths:
            - '1*/acquia'
            - '2*/acquia'
            - '3*/acquia'
            - '4*/acquia'

  artifact_acquia_restore:
    description: 'Restore the previously built Acquia artifact'
    steps:
      -
        attach_workspace:
          name: 'Restore the previously built Acquia artifact'
          at: './artifacts'
      -
        run:
          name: 'symlink artifacts/latest'
          command: |-
            . ./.circleci/app.bash
            version="$(appLatestArtifactVersionNumber)"
            ( \
              cd ./artifacts \
              && \
              ln -s "./${version}" 'latest' \
            )

  supervisor_start:
    description: 'Start supervisor'
    steps:
      -
        browser-tools/install-chrome:
          channel: 'stable'
      -
        run:
          name: 'Start Supervisor – execute'
          command: |-
            appE2ePrepare
            appWaitForSupervisor 'http://127.0.0.1:8999' '10'

  mysql_start:
    description: |-
      MySQL is already running in another container,
      but the configuration requires some adjustments.
    steps:
      -
        run:
          name: 'MySQL – start – install required packages'
          command: |-
            appMysqlInstallRequiredPackages
      -
        run:
          name: 'MySQL – start – ~/.my.cnf'
          command: |-
            appMysqlPrepareCnf
      -
        run:
          # The MySQL container is not immediately ready for connections.
          name: 'MySQL – start – wait'
          command: |-
            appMysqlWait
      -
        run:
          # Legacy migration not going to happen on CI,
          # but the `drush migrate:import app_default*` command fails when a migration source is not available.
          # So the source database has to be available,
          # but luckily the database tables aren't required.
          name: 'MySQL – start – create migration source database'
          command: |-
            appMysqlCreateMigrationSourceDatabase

  solr_start:
    # @todo Multi-site support.
    description: |-
      Solr is already running in another container.
      It has to be properly configured and restarted.
    parameters:
      solr_cores_dir: *parameter_solr_cores_dir
    steps:
      -
        run:
          name: 'Solr – start – Initialize SSH access to "solr" host'
          command: |-
            appSshKnownHostsAdd 'solr'
      -
        run:
          name: 'Solr – start – Configure Solr cores'
          command: |-
            sshpass -p "${appSolrRootPassword}" scp -r '<<parameters.solr_cores_dir>>' 'root@solr:/usr/local/share/solr/server/solr/'
      -
        run:
          name: 'Solr – start – Restart the Solr server'
          command: |-
            sshpass -p "${appSolrRootPassword}" ssh 'root@solr' supervisorctl restart solr.07
      # @todo Wait for the Solr service to be ready.

  headless_chrome_start:
    description: 'Headless Google Chrome – Start'
    # Headless Google Chrome is already started in "supervisor_start"
    # It takes a few seconds to be ready for connections.
    steps:
      -
        run:
          name: 'Headless Google Chrome – Start – Wait for the headless Google Chrome'
          command: |-
            appWaitForHeadlessGoogleChrome


  main_instance_prepare_to_e2e:
    description: 'Main instance build'
    steps:
      -
        run:
          name: 'Main instance – prepare to E2E – Site install'
          command: |-
            composer run site:install:prod:default

  acquia_instance_prepare_to_e2e:
    description: 'Acquia instance - prepare to E2E'
    steps:
      -
        run:
          name: 'Aquia instance - prepare to E2E'
          command: |-
            appAcquiaInstanceE2ePrepare

  test_config_status:
    description: 'Test – drush app:test:config-status'
    steps:
      -
        run:
          name: 'Test – drush app:test:config-status'
          command: |-
            ${appDrushExecutable} "${appDrushSiteAlias}" app:test:config-status

  test_behat:
    description: 'Test – Behat'
    steps:
      -
        run:
          name: 'Test – Behat – main instance – behat rerun cache directory'
          command: |-
            mkdir \
              --parents \
              "$(yq eval --no-colors '.default.testers.rerun_cache' './behat.yml' | sed --expression 's@%paths.base%@.@g')"
      -
        run:
          name: 'Test – Behat – execute'
          command: |-
            "$(composer config bin-dir)/behat"
      -
        store_artifacts:
          name: 'Test – Behat – Store test reports as artifacts'
          path: './reports'
          destination: 'reports'
      -
        store_test_results:
          name: 'Test – Behat – Store test results'
          path: './reports/machine/junit/behat/'

  test_functional_javascript:
    description: 'Test – Functional JavaScript'
    steps:
      -
        run:
          name: 'Test – Functional JavaScript – execute'
          command: |-
            # Environment variable XDEBUG_MODE=coverage is intentionally ignored.
            "$(composer config bin-dir)/phpunit" --testsuite='functional-javascript'
      -
        store_artifacts:
          name: 'Test – Functional JavaScript – Store test reports as artifacts'
          path: './reports'
          destination: 'reports'
      -
        store_test_results:
          name: 'Test – Functional JavaScript – Store test results'
          path: './reports/machine/junit'

  acquia_backup_download:
    description: 'Download backup from AcquiaHosting:dev'
    parameters:
      project_root: *parameter_project_root
    steps:
      -
        run:
          name: 'Download backup from AcquiaHosting:dev'
          command: |-
            cd '<<parameters.project_root>>'

            # @todo Get this from drush config marvin.acquia.projectId.
            remoteHome='/home/druphungary'
            mkdir --parents './sites/default/backup/prod/'

            "$(composer config bin-dir)/drush" \
              --config='drush' \
              core:rsync \
              "@app.dev:/${remoteHome}/backup/prod/default/" \
              './sites/default/backup/prod/' \
              -- \
              --delete

  backup_restore:
    description: 'Backup restore'
    parameters:
      project_root: *parameter_project_root
      site:
        type: 'string'
        default: 'default'
      backup:
        type: 'string'
        default: 'prod'
    # @todo Clear Solr indexes and reindex
    steps:
      -
        run:
          name: 'Backup restore – databases'
          command: |-
            cd '<<parameters.project_root>>'
            "$(composer config bin-dir)/drush" \
              --config='drush' \
              --yes \
              sql:drop \
            && \
            "$(composer config bin-dir)/drush" \
              --config='drush' \
              --yes \
              sql:cli \
              < "./sites/<<parameters.site>>/backup/<<parameters.backup>>/database/default.mysql"
      -
        run:
          name: 'Backup restore – files'
          command: |-
            cd '<<parameters.project_root>>'

            "$(composer config bin-dir)/drush" \
              --config='drush' \
              --yes \
              core:rsync \
              "./sites/<<parameters.site>>/backup/<<parameters.backup>>/file/files/" \
              @app.local:%files \
              -- \
              --delete \
            && \
            "$(composer config bin-dir)/drush" \
              --config='drush' \
              --yes \
              core:rsync \
              "./sites/<<parameters.site>>/backup/<<parameters.backup>>/file/private/" \
              @app.local:%private \
              -- \
              --delete

  test_updatedb:
    description: 'Test – update process'
    steps:
      -
        run:
          name: 'Test – update process'
          command: |-
            source ./hooks/.includes/app.bash
            cd './artifacts/latest/acquia'
            appUpdate

  add_ssh_keys_acquia:
    description: 'Add SSH keys – Acquia'
    steps:
      -
        add_ssh_keys:
          fingerprints:
            # https://app.circleci.com/settings/project/github/drupalhu/drupal.hu/ssh
            - '3d:17:dd:de:41:4f:dc:a7:2a:ca:07:73:b3:82:7b:b7'
      -
        run:
          name: 'Add SSH keys – Acquia – add to ~/.ssh/known_hosts'
          command: |-
            appSshKnownHostsAdd "$(yq eval '.marvin.acquia.gitHost' ./.circleci/resources/project/drush/drush.host.yml)"
            appSshKnownHostsAdd "$(yq eval '.dev.host'  ./drush/sites/app.site.yml)"
            appSshKnownHostsAdd "$(yq eval '.test.host' ./drush/sites/app.site.yml)"

  deploy_to_acquia_env_dev:
    description: 'Deploy to Acquia environment – dev'
    steps:
      -
        run:
          name: 'Deploy to Acquia environment – dev – git push'
          command: |-
            version="$(appLatestArtifactVersionNumber)"
            acquiaGitRemoteBranch='2.x'

            srcGitCommitHash="$(git log -1 --format='%h')"
            srcGitCommitDate="$(git log -1 --format='%ad')"
            (
              cd "artifacts/${version}/acquia"

              rm --recursive --force ./.git/hooks
              git config --unset core.hooksPath

              composer update --no-dev --lock
              acquiaGitLocalBranch="$(git rev-parse --abbrev-ref HEAD)"
              git add .
              git commit \
                --message="Built from ${srcGitCommitHash} ${srcGitCommitDate}" \
                --message="${APP_GITHUB_URL}/commit/${srcGitCommitHash}"
              git push acquia "${acquiaGitLocalBranch}:${acquiaGitRemoteBranch}"
            )


  # region DDev commands
  ddev_init_info:
    description: 'DDev – init – info'
    steps:
      -
        run:
          name: 'DDev – init – info'
          command: |
            env | sort
            echo "OS release:\n$(cat /etc/os-release)"
            echo "pwd:\n$(pwd)"
            echo "id:\n$(id)"
            echo "bash:\n$(bash --version)"
            echo "zsh:\n$(zsh --version)"
            echo "git:\n$(git --version)"
            echo "parallel:\n$(parallel --version)"
            echo "sed:\n$(sed --version)"
            echo "jq:\n$(jq --version)"
            echo "yq:\n$(yq --version)"

  ddev_init_install:
    description: 'DDev – init – install'
    steps:
      -
        run:
          name: 'DDev – init – install'
          command: |
            curl -s -L https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh | bash

  ddev_init_config:
    description: 'DDev – init – configure'
    steps:
      -
        run:
          name: 'DDev – init – configure'
          command: |
            cp ./.ddev/.env.example ./.ddev/.env

  ddev_init_start:
    description: 'DDev – init – start'
    steps:
      -
        run:
          name: 'Yarn cache – Calculate checksum'
          command: |-
            # Collect all the checksum of yarn.lock files into one file.
            echo -n '' > 'checksum-of-frontend-asset-sources.sha256'
            git ls-files -- '**/yarn.lock' | xargs sha256sum >> 'checksum-of-frontend-asset-sources.sha256'
      -
        restore_cache:
          name: 'Yarn cache – restore'
          keys:
            - 'npm-{{ checksum "checksum-of-frontend-asset-sources.sha256" }}-2'
      -
        restore_cache:
          name: 'Composer cache – restore'
          keys:
            - 'composer-{{ checksum "./composer.lock" }}-3'
      -
        run:
          name: 'DDev – init – start'
          command: |
            ddev start
      -
        save_cache:
          name: 'Composer cache – save'
          key: 'composer-{{ checksum "./composer.lock" }}-3'
          paths:
            - '/mnt/ddev-global-cache/composer'
      -
        save_cache:
          name: 'Yarn cache – save'
          key: 'npm-{{ checksum "checksum-of-frontend-asset-sources.sha256" }}-2'
          paths:
            - '/mnt/ddev-global-cache/yarn'

  ddev_lint_phpcs:
    description: 'DDev – QA static – lint:phpcs'
    steps:
      -
        run:
          name: 'DDev – QA static – lint:phpcs'
          command: |
            ddev drush app:lint:phpcs

  ddev_lint_phpstan:
    description: 'DDev – QA static – lint:phpstan'
    steps:
      -
        run:
          name: 'DDev – QA static – lint:phpstan'
          command: |
            ddev drush app:lint:phpstan

  ddev_lint_frontend:
    description: 'DDev – QA static – lint:frontend'
    steps:
      -
        run:
          name: 'DDev – QA static – lint:frontend'
          command: |
            ddev drush app:lint:frontend

  ddev_test_unit:
    description: 'DDev – QA unit – test:unit'
    steps:
      -
        run:
          name: 'DDev – QA unit – test:unit'
          command: |
            ddev exec ./vendor/bin/phpunit --testsuite='unit'

  ddev_test_functional_javascript:
    description: 'DDev – QA e2e – test:functional-javascript'
    steps:
      -
        run:
          name: 'DDev – QA e2e – test:functional-javascript'
          command: |
            ddev exec ./vendor/bin/phpunit --testsuite='functional-javascript'

  ddev_test_behat:
    description: 'DDev – QA e2e – test:behat'
    steps:
      -
        run:
          name: 'DDev – QA e2e – test:behat'
          command: |
            ddev exec ./vendor/bin/behat

  # endregion

  # region Debug commands
  debug_mysql:
    description: 'MySQL – Debug'
    steps:
      -
        run:
          name: 'MySQL – Debug – ENV vars'
          command: |-
            echo "mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}"
      -
        run:
          name: 'MySQL – Debug – root connection'
          command: |-
            mysql \
              --user='root' \
              --password="${MYSQL_ROOT_PASSWORD}" \
              --host="${MYSQL_HOST}" \
              --port="${MYSQL_PORT}" \
              "${MYSQL_DATABASE}" \
              --execute='SELECT USER(); SHOW DATABASES;'
      -
        run:
          name: 'MySQL – Debug – normal connection'
          command: |-
            mysql \
              --user="${MYSQL_USER}" \
              --password="${MYSQL_PASSWORD}" \
              --host="${MYSQL_HOST}" \
              --port="${MYSQL_PORT}" \
              "${MYSQL_DATABASE}" \
              --execute='SELECT USER(); SHOW DATABASES;'

  debug_headless_chrome:
    description: 'Headless Google Chrome – Debug'
    steps:
      - 'supervisor_start'
      - 'headless_chrome_start'
  debug_ssh_config:
    description: 'Debug – SSH config'
    steps:
      -
        run:
          name: 'Debug – SSH config'
          command: |-
            . ./.circleci/app.bash
            appDebugSshConfig

  debug_acquia_git_access:
    description: 'Debug – Acquia Hosting – Git access'
    steps:
      -
        run:
          name: 'Debug – Acquia Hosting – Git access'
          command: |-
            . ./.circleci/app.bash
            appDebugAcquiaGitAccess

  debug_acquia_env_access:
    description: 'Debug – Acquia Hosting – Environment access'
    parameters:
      ah_env:
        type: 'string'
    steps:
      -
        run:
          name: 'Debug – Acquia Hosting – Environment access'
          command: |-
            . ./.circleci/app.bash
            appDebugAcquiaEnvAccess '<<parameters.ah_env>>'
  debug_bash_env:
    description: 'Debug – BASH_ENV'
    steps:
      -
        run:
          name: 'Debug – BASH_ENV – list environment variables'
          command: |-
            echo "\${BASH_ENV} = ${BASH_ENV}"
            env | sort
      -
        run:
          name: 'Debug – BASH_ENV – cat "${BASH_ENV}"'
          command: |-
            cat "${BASH_ENV}" || true
  # endregion

jobs:
  build:
    executor: 'php_min'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'php_extension_install'
      - 'composer_install'
      - 'main_instance_onboarding'
      - 'main_instance_build'

  test_static:
    executor: 'php_min'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'php_extension_install'
      - 'composer_install'
      - 'main_instance_onboarding'
      - 'main_instance_build'
      - 'test_lint'
      - 'test_unit'

  release_artifact_build:
    executor: 'php_min'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'php_extension_install'
      - 'composer_install'
      - 'main_instance_onboarding'
      - 'main_instance_build'
      - 'add_ssh_keys_acquia'
      - 'artifact_acquia_build'

  test_behat:
    executor: 'php_min_with_services'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'git_config'
      - 'php_extension_install'
      - 'composer_install'
      - 'artifact_acquia_restore'
      - 'main_instance_onboarding'
      - 'main_instance_build'
      - 'supervisor_start'
      - 'mysql_start'
      - 'solr_start'
      - 'headless_chrome_start'
      - 'main_instance_prepare_to_e2e'
      - 'test_config_status'
      - 'acquia_instance_prepare_to_e2e'
      - 'test_behat'

  test_functional_javascript:
    executor: 'php_min_with_services'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'browser-tools/install-browser-tools'
      - 'git_config'
      - 'php_extension_install'
      - 'composer_install'
      - 'main_instance_onboarding'
      - 'main_instance_build'
      - 'supervisor_start'
      - 'mysql_start'
      - 'solr_start'
      - 'headless_chrome_start'
      - 'main_instance_prepare_to_e2e'
      - 'test_config_status'
      - 'test_functional_javascript'

  test_updatedb:
    executor: 'php_min_with_services'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'php_extension_install'
      - 'git_config'
      - 'add_ssh_keys_acquia'
      - 'composer_install'
      - 'main_instance_onboarding'
      - 'main_instance_build'
      - 'artifact_acquia_restore'
      - 'supervisor_start'
      - 'mysql_start'
      - 'solr_start'
      - 'acquia_instance_prepare_to_e2e'
      -
        acquia_backup_download:
          project_root: 'artifacts/latest/acquia'
      -
        backup_restore:
          project_root: 'artifacts/latest/acquia'
          site: 'default'
          backup: 'prod'
      - 'test_updatedb'

  deploy_to_acquia_env_dev:
    executor: 'php_min'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'php_extension_install'
      - 'git_config'
      - 'add_ssh_keys_acquia'
      - 'artifact_acquia_restore'
      - 'deploy_to_acquia_env_dev'

  ddev_all_in_one:
    machine:
      image: 'ubuntu-2004:current'
      docker_layer_caching: true
    environment:
      DDEV_NONINTERACTIVE: "true"
      <<: *env_app
      <<: *env_composer
      <<: *env_node
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'ddev_init_info'
      - 'ddev_init_install'
      - 'ddev_init_config'
      - 'ddev_init_start'
      - 'ddev_lint_phpcs'
      - 'ddev_lint_phpstan'
      - 'ddev_lint_frontend'
      - 'ddev_test_unit'
      - 'ddev_test_functional_javascript'
      - 'ddev_test_behat'

  # region Debug jobs
  debug_headless_chrome:
    executor: 'php_min_with_services'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'debug_headless_chrome'

  debug_acquia_access:
    executor: 'php_min'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'git_config'
      - 'add_ssh_keys_acquia'
      - 'debug_acquia_git_access'
      -
        debug_acquia_env_access:
          ah_env: 'dev'
      -
        debug_acquia_env_access:
          ah_env: 'test'

  debug_mysql:
    executor: 'php_min_with_services'
    steps:
      - 'apt_get_update'
      - 'bash_env_init'
      - 'checkout'
      - 'mysql_start'
      - 'debug_mysql'

  debug_bash_env:
    executor: 'php_min'
    steps:
      - 'bash_env_init'
      - 'debug_bash_env'
  # endregion

workflows:
  QA_DDev:
    when: false
    jobs:
      -
        ddev_all_in_one: {}

  QA_Docker:
    when: true
    jobs:
      -
        build: {}
      -
        release_artifact_build:
          requires:
            - 'build'
      -
        test_static:
          requires:
            - 'build'
      -
        test_behat:
          requires:
            - 'build'
            - 'release_artifact_build'
      -
        test_functional_javascript-hold:
          description: 'Approval will trigger other jobs.'
          type: 'approval'
      -
        test_functional_javascript:
          requires:
            - 'build'
            - 'test_functional_javascript-hold'
      -
        test_updatedb:
          requires:
            -
              'release_artifact_build'
      -
        deploy_to_acquia_env_dev:
          filters:
            branches:
              only: '2.x'
          requires:
            - 'test_static'
#            - 'test_functional_javascript'
            - 'release_artifact_build'
            - 'test_behat'
            - 'test_updatedb'

  debug_acquia_access:
    when: false
    jobs:
      -
        debug_acquia_access: {}

  debug_headless_chrome:
    when: false
    jobs:
      - 'debug_headless_chrome'

  debug_test_updatedb:
    when: false
    jobs:
      -
        build: {}
      -
        release_artifact_build:
          requires:
            - 'build'
      -
        test_updatedb:
          requires:
            -
              'release_artifact_build'

  debug_mysql:
    when: false
    jobs:
      - 'debug_mysql'

  debug_bash_env:
    when: false
    jobs:
      - 'debug_bash_env'
