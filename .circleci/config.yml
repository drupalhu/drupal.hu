version: 2.1

orbs:
  codecov: 'codecov/codecov@3.0.0'

.env_common: &env_common
  BASH_ENV: '/root/.bashrc'

.env_composer: &env_composer
  COMPOSER_NO_INTERACTION: '1'
  COMPOSER_MEMORY_LIMIT: '-1'
  COMPOSER_CACHE_DIR: '/root/.cache/composer'

.env_drush: &env_drush
  DRUSH_OPTIONS_PROGRESS_DELAY: '9999'
  DRUSH_OPTIONS_NO_INTERACTION: '1'

  DRUSH_MARVIN_ENVIRONMENT: 'ci'

.env_node: &env_node
  YARN_CACHE_FOLDER: '/root/.cache/yarn/v6'

.env_app: &env_app
  appDrushExecutable: 'bin/drush --config=drush'
  appDrushSiteAlias: '@app.local'
  appDocroot: 'docroot'
  appInstallProfileName: 'appp'

  appChromiumHostPort: 'localhost:9222'

  appSolrRootPassword: 'root'

  COLUMN: '110'


.env_mysql: &env_mysql
  MYSQL_ROOT_HOST: '%'
  MYSQL_ROOT_PASSWORD: 'root'
  MYSQL_USER: 'drupalhu'
  MYSQL_PASSWORD: 'drupalhu'
  MYSQL_HOST: '127.0.0.1'
  MYSQL_PORT: '3306'
  MYSQL_DATABASE: 'drupalhu__default'
  appMysqlHost: 'database'


executors:
  php_min:
    docker:
      - &docker_container_main
        name: 'main'
        image: 'sweetchuck/php-env-dev:7.4.23-n141701-20210914'
        environment:
          <<: *env_common
          <<: *env_composer
          <<: *env_drush
          <<: *env_node
          <<: *env_app
          <<: *env_mysql
        entrypoint: ['/bin/bash']

  php_min_with_services:
    docker:
      - *docker_container_main
      - &docker_container_database
        name: 'database'
        image: 'mysql:5.7.34'
        environment:
          <<: *env_mysql
      - &docker_container_solr
        name: 'solr'
        image: 'sweetchuck/solr:7.7.3'

commands:
  git_config:
    description: 'Git config'
    steps:
      -
        run:
          name: 'Git config – user.{email,name}'
          command: |-
            git config --global user.email 'circleci@drupal.hu'
            git config --global user.name  "CircleCI ${CIRCLE_USERNAME}"

  composer_install:
    description: 'Composer install'
    steps:
      -
        restore_cache:
          name: 'Composer install – cache restore'
          keys:
            - 'composer-{{ checksum "./composer.lock" }}-3'

      -
        run:
          name: 'Composer install – execute'
          command: >
            composer install --no-progress

      -
        save_cache:
          name: 'Composer install – cache save'
          key: 'composer-{{ checksum "./composer.lock" }}-3'
          paths:
            - '/root/.cache/composer/'

  main_instance_build:
    description: 'Main instance code base'
    steps:
      -
        run:
          name: 'Main instance prepare – Calculate checksum of NPM tools'
          command: |-
            # Collect all the checksum of yarn.lock files into one file.
            echo -n '' > 'checksum-of-frontend-asset-sources.sha256'
            git ls-files -- '**/yarn.lock' | xargs sha256sum >> 'checksum-of-frontend-asset-sources.sha256'
      -
        restore_cache:
          name: 'Main instance prepare – NPM – cache restore'
          keys:
            - 'npm-{{ checksum "checksum-of-frontend-asset-sources.sha256" }}-2'
      -
        run:
          name: 'Main instance prepare – drush marvin:build'
          command: >
            $appDrushExecutable marvin:build
      -
        save_cache:
          name: 'Main instance prepare – NPM – cache save'
          key: 'npm-{{ checksum "checksum-of-frontend-asset-sources.sha256" }}-2'
          paths:
            - '/root/.cache/yarn/v6'

  lint:
    description: 'Run linters'
    steps:
      -
        run:
          name: 'Run linters'
          command: >-
            $appDrushExecutable marvin:lint

  test_unit:
    description: 'Test – Unit'
    steps:
      -
        run:
          name: 'Test – Unit – php.ini preset – xdebug3'
          command: |-
            . ./.circleci/scripts/include.bash
            appPhpCliPresetActivate xdebug3
      -
        run:
          name: 'Test – Unit – execute'
          command: |-
            XDEBUG_MODE='coverage' bin/phpunit --testsuite='unit'
      -
        run:
          name: 'Test – Unit – php.ini preset – prod'
          command: |-
            . ./.circleci/scripts/include.bash
            appPhpCliPresetActivate prod
      -
        store_test_results:
          name: 'Test – Unit – Store unit test results'
          path: './reports/machine/result'
      -
        codecov/upload:
          flags: 'unit'
          file: './reports/machine/coverage/phpunit.clover.xml'

  artifact_acquia_build:
    description: 'Build an Acquia specific release artifact'
    steps:
      -
        run:
          name: 'Build an Acquia specific release artifact'
          command: |-
            $appDrushExecutable \
              --define='marvin.acquia.projectId=' \
              marvin:artifact:build:acquia
      -
        persist_to_workspace:
          name: 'Store the release artifact'
          root: './artifacts'
          paths:
            - '*/acquia'

  artifact_acquia_restore:
    description: 'Restore the previously built Acquia artifact'
    steps:
      -
        attach_workspace:
          name: 'Restore the previously built Acquia artifact'
          at: './artifacts'

  supervisor_start:
    description: 'Start supervisor'
    steps:
      -
        run:
          name: 'Start Supervisor – execute'
          command: |-
            supervisord
            sleep 3
      # @todo Wait for supervisor.

  mysql_start:
    description: |-
      MySQL is already running in another container,
      but the configuration requires some adjustments.
    steps:
      -
        run:
          name: 'MySQL – start – wait'
          command: |-
            . ./.circleci/scripts/include.bash
            appWaitForMysql 'root' "${MYSQL_ROOT_PASSWORD}" "${appMysqlHost}" "${MYSQL_PORT}"
      -
        run:
          name: 'MySQL – start – ~/.my.cnf'
          command: |-
            . ./.circleci/scripts/include.bash
            appMysqlPrepareCnf
      -
        run:
          name: 'MySQL – start – create migration source database'
          command: |-
            mysql \
              --execute="
                CREATE DATABASE migrate /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */;
                GRANT ALL PRIVILEGES ON migrate.* TO '${MYSQL_USER}'@'%';
                FLUSH PRIVILEGES;
                SHOW CREATE DATABASE migrate;
              "

  solr_start:
    description: |-
      Solr is already running in another container.
      It has to be properly configured and restarted.
    steps:
      -
        run:
          name: 'Solr – start – Initialize SSH access to "solr" host'
          command: |-
            mkdir -p ~/.ssh
            if ssh-keygen -F 'solr'; then
                ssh-keygen -R 'solr'
            fi
            ssh-keyscan -H 'solr' >> ~/.ssh/known_hosts
      -
        run:
          name: 'Solr – start – Configure Solr cores'
          command: |-
            sshpass -p "${appSolrRootPassword}" scp -r './sites/default/solr/cores/' 'root@solr:/usr/local/share/solr/server/solr/'
      -
        run:
          name: 'Solr – start – Restart the Solr server'
          command: |-
            sshpass -p "${appSolrRootPassword}" ssh 'root@solr' supervisorctl restart solr.07
      # @todo Wait for the Solr service to be ready.

  phpfpm_start:
    description: 'PHP-FPM – start'
    steps:
      -
        run:
          name: 'PHP-FPM – start'
          command: |-
            . ./.circleci/scripts/include.bash
            supervisorctl start "php-fpm.$(appPhpbrewCurrent).prod"

  nginx_start:
    description: 'Nginx – start'
    steps:
      -
        run:
          name: 'Nginx – start – configure'
          command: |-
            . ./.circleci/scripts/include.bash
            appNginxVirtualHost "${PWD}"
      -
        run:
          name: 'Nginx – start – start'
          command: |-
            supervisorctl start nginx

  headless_chromium_start:
    description: 'Headless chromium – start'
    steps:
      -
        run:
          name: 'Headless chromium – start'
          command: |-
            supervisorctl start chromium.headless.9222
      -
        run:
          name: 'Headless chromium start – Wait for the headless Chromium'
          command: |-
            . ./.circleci/scripts/include.bash
            appWaitForHeadlessChromium "${appChromiumHostPort}"

  artifact_acquia_instance_prepare:
    description: 'Acquia artifact – prepare'
    steps:
      -
        run:
          name: 'Acquia artifact – prepare – settings.php'
          command: |-
            echo '@todo'



  main_instance_prepare:
    description: 'Prepare the main Drupal instance for end-to-end tests'
    steps:
      -
        attach_workspace:
          name: ''
          at: './artifacts'
      -
        run:
          name: 'Test – Behat – main instance – marvin:onboarding'
          command: |-
            . ./.circleci/scripts/include.bash

            appMarvinOnboarding \
              "${PWD}" \
              "${appDrushSiteAlias}"
      -
        run:
          name: 'Test – Behat – main instance – settings.php – general'
          command: |-
            echo '@todo e.g: thrusted host settings'
      -
        run:
          name: 'Test – Behat – Site install'
          command: |-
            composer run site:install:prod:default
      -
        run:
          name: 'Test – Behat – Check config status'
          command: |-
            . ./.circleci/scripts/include.bash

            appCheckConfigStatus "${PWD}/${appDocroot}" '@app.local'

  test_behat:
    description: 'Test – Behat'
    steps:
      -
        run:
          name: 'Test – Behat – main instance – behat rerun cache directory'
          command: |-
            mkdir \
              --parents \
              "$(yq eval --no-colors '.default.testers.rerun_cache' './behat.yml' | sed --expression 's@%paths.base%@.@g')"
      -
        run:
          name: 'Test – Behat – execute'
          command: |-
            ./bin/behat
      -
        store_artifacts:
          name: 'Test – Behat – Store test reports as artifacts'
          path: './reports'
          destination: 'reports'
      -
        store_test_results:
          name: 'Test – Behat – Store test results'
          path: './reports/machine/result/behat/'

  test_functional_javascript:
    description: 'Test – Functional JavaScript'
    steps:
      -
        run:
          name: 'Test – Functional JavaScript – execute'
          command: |-
            # Environment variable XDEBUG_MODE=coverage is intentionally ignored.
            ./bin/phpunit --testsuite 'functional-javascript'
      -
        store_artifacts:
          name: 'Test – Functional JavaScript – Store test reports as artifacts'
          path: './reports'
          destination: 'reports'
      -
        store_test_results:
          name: 'Test – Functional JavaScript – Store test results'
          path: './reports/machine/result/'

  mysql_debug:
    description: 'MySQL – Debug'
    steps:
      -
        run:
          name: 'MySQL – Debug – ENV vars'
          command: |-
            echo "mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${appMysqlHost}:${MYSQL_PORT}/${MYSQL_DATABASE}"
      -
        run:
          name: 'MySQL – Debug – root connection'
          command: |-
            mysql \
              --user='root' \
              --password="${MYSQL_ROOT_PASSWORD}" \
              --host="${appMysqlHost}" \
              --port="${MYSQL_PORT}" \
              "${MYSQL_DATABASE}" \
              --execute='SELECT USER(); SHOW DATABASES;'
      -
        run:
          name: 'MySQL – Debug – normal connection'
          command: |-
            mysql \
              --user="${MYSQL_USER}" \
              --password="${MYSQL_PASSWORD}" \
              --host="${appMysqlHost}" \
              --port="${MYSQL_PORT}" \
              "${MYSQL_DATABASE}" \
              --execute='SELECT USER(); SHOW DATABASES;'

jobs:
  build:
    executor: 'php_min'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'composer_install'
      - 'main_instance_build'

  lint_and_test_unit:
    executor: 'php_min'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'composer_install'
      - 'main_instance_build'
      - 'lint'
      - 'test_unit'

  release_artifact_build:
    executor: 'php_min'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'composer_install'
      - 'main_instance_build'
      - 'artifact_acquia_build'

  test_behat:
    executor: 'php_min_with_services'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'git_config'
      - 'composer_install'
      - 'main_instance_build'
      - 'artifact_acquia_restore'
      - 'supervisor_start'
      - 'mysql_start'
      - 'solr_start'
      - 'phpfpm_start'
      - 'nginx_start'
      - 'headless_chromium_start'
      - 'main_instance_prepare'
      - 'test_behat'

  test_functional_javascript:
    executor: 'php_min_with_services'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'git_config'
      - 'composer_install'
      - 'main_instance_build'
      - 'artifact_acquia_restore'
      - 'supervisor_start'
      - 'mysql_start'
      - 'solr_start'
      - 'phpfpm_start'
      - 'nginx_start'
      - 'headless_chromium_start'
      - 'main_instance_prepare'
      - 'test_functional_javascript'

  mysql_debug:
    executor: 'php_min_with_services'
    working_directory: '~/repo'
    steps:
      - 'checkout'
      - 'mysql_start'
      - 'mysql_debug'

workflows:
  mysql_debug:
    when: false
    jobs:
      - 'mysql_debug'

  lint_and_test:
    jobs:
      -
        build: {}
      -
        lint_and_test_unit:
          requires:
            - 'build'
      -
        release_artifact_build:
          requires:
            - 'build'
      -
        test_behat:
          requires:
            - 'build'
      -
        test_functional_javascript:
          requires:
            - 'build'
