<?php
/**
 * @file
 * Drupal release fetcher.
 */

/**
 * Default value for the minimum supported major Drupal core version.
 */
define('DRUPALORG_SCRAPER_MAJOR_MIN', 6);

/**
 * Default value for the maximum supported major Drupal core version.
 */
define('DRUPALORG_SCRAPER_MAJOR_MAX', 8);

/**
 * Implements hook_theme().
 */
function drupalorg_scraper_theme() {
  return array(
    'drupalorg_scraper_releases' => array(
      'variables' => array(
        'releases' => array(),
        'highlight' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function drupalorg_scraper_block_info() {
  return array(
    'releases' => array(
      'info' => t('Drupal download links'),
    ),
  );
}

/**
 * @param string $delta
 *
 * @return array|null
 */
function drupalorg_scraper_block_configure_defaults($delta = '') {
  switch ($delta) {
    case 'releases':
      return array(
        'visible' => array(
          '8:stable' => '8:stable',
          '7:stable' => '7:stable',
          '6:stable' => '6:stable',
        ),
        'lang_code' => 'hu',
      );

  }

  return NULL;
}

/**
 * Implements hook_block_configure().
 */
function drupalorg_scraper_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'releases':
      $releases = drupalorg_scraper_release_history_all();
      $key = 'drupalorg_scraper_block_releases';

      $config = variable_get($key, drupalorg_scraper_block_configure_defaults($delta));

      $form[$key] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#title' => t('Drupal.org Scraper settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        'visible' => array(
          '#type' => 'checkboxes',
          '#required' => TRUE,
          '#title' => t('Visible releases'),
          '#default_value' => $config['visible'],
          '#options' => array(),
        ),
        'lang_code' => array(
          '#type' => 'textfield',
          '#required' => TRUE,
          '#title' => t('Language code'),
          '#description' => t(
            'Language code for the download links of translations.'
          ),
          '#default_value' => $config['lang_code'],
        ),
      );

      foreach ($releases as $major => $release_history) {
        foreach ($release_history['latest'] as $release_type => $r) {
          if ($r !== NULL) {
            $form[$key]['visible']['#options']["$major:$release_type"] = "$major.x $release_type";
          }
        }
      }
      break;

  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function drupalorg_scraper_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'releases':
      $key = 'drupalorg_scraper_block_releases';
      variable_set($key, $edit[$key]);
      break;

  }
}

/**
 * Implements hook_block_view().
 */
function drupalorg_scraper_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'releases':
      $block['subject'] = '+ Letöltés';
      $block['content'] = array(
        '#theme' => 'drupalorg_scraper_releases',
        '#releases' => array(),
        '#highlight' => NULL,
      );

      // @see D9+ https://www.drupal.org/project/drupalorg/issues/3263693 fix.
      $visible_releases = [
        '10:stable',
      ];
      $releases = [
        '10' => [
          'latest' => [
            'stable' => '10',
          ],
          'releases' => [
            'release' => [
              '10' => [
                'version' => '10',
                'version_major' => '10',
                'download_link' => 'https://www.drupal.org/download',
              ],
            ],
          ],
        ],
      ];
      foreach ($visible_releases as $release_id) {
        list($major, $release_type) = explode(':', $release_id);
        if (!isset($releases[$major]['latest'][$release_type])) {
          continue;
        }

        $release_key = $releases[$major]['latest'][$release_type];
        $release = $releases[$major]['releases']['release'][$release_key];
        $block['content']['#releases'][$release_id] = $release;

        if ($release_type === 'stable'
          && (!$block['content']['#highlight'] || version_compare($block['content']['#highlight'], $release_id) === -1)
        ) {
          $block['content']['#highlight'] = $release_id;
        }
      }
      break;

  }

  return $block;
}

/**
 * @param bool $reset
 *
 * @return array
 */
function drupalorg_scraper_release_history_all($reset = FALSE) {
  $major_min = variable_get('drupalorg_scraper_major_min', DRUPALORG_SCRAPER_MAJOR_MIN);
  $major_max = variable_get('drupalorg_scraper_major_max', DRUPALORG_SCRAPER_MAJOR_MAX);

  $release_history = array();
  for ($major = $major_max; $major >= $major_min; $major--) {
    $release_history[$major] = drupalorg_scraper_release_history($major, $reset);
  }

  return $release_history;
}

/**
 * @param int $version_major
 * @param bool $reset
 *
 * @return array
 */
function drupalorg_scraper_release_history($version_major, $reset = FALSE) {
  $cache_id = "drupalorg_scraper:release_history:$version_major";

  if (!$reset) {
    $cache = cache_get($cache_id);
    if ($cache) {
      return $cache->data;
    }
  }

  $xml = drupalorg_scraper_release_history_xml($version_major);
  $release_history = drupalorg_scraper_release_history_parse($xml);
  cache_set($cache_id, $release_history, 'cache', REQUEST_TIME + 7200);

  return $release_history;
}

/**
 * @param int $version_major
 *
 * @return array
 */
function drupalorg_scraper_release_history_xml($version_major) {
  $project_status_url = drupalorg_scraper_release_history_url_base();
  $project = system_get_info('module', 'system');
  $response = drupal_http_request(
    "$project_status_url/{$project['project']}/$version_major.x",
    array(
      'headers' => array(
        'Accept' => 'text/xml,application/xml',
        'Accept-Charset' => 'utf-8',
      ),
    )
  );

  return $response->code === '200' ? $response->data : FALSE;
}

/**
 * @param string $xml
 *
 * @return array|false
 */
function drupalorg_scraper_release_history_parse($xml) {
  if (!$xml) {
    return FALSE;
  }

  $doc = new DOMDocument('1.0', 'utf-8');
  $doc->loadXML($xml);

  if ($doc->childNodes->length === 0 || $doc->childNodes->item(0)->nodeName !== 'project') {
    return FALSE;
  }

  $info = array();

  for ($i = 0; $i < $doc->childNodes->item(0)->childNodes->length; $i++) {
    _drupalorg_scraper_release_history_parse(
      $doc->childNodes->item(0)->childNodes->item($i),
      $info,
      array()
    );
  }

  $info += array(
    'releases' => array(),
    'latest' => array(
      'stable' => NULL,
      'rc' => NULL,
      'beta' => NULL,
      'alpha' => NULL,
      'dev' => NULL,
    ),
  );
  $info['releases'] += array('release' => array());

  foreach ($info['releases']['release'] as $r => $release) {
    $stability = drupalorg_scraper_release_stability($release);
    if ($stability && !isset($info['latest'][$stability])) {
      $info['latest'][$stability] = $r;
    }
    elseif ($stability) {
      $prev_index = $info['latest'][$stability];
      $prev_version = $info['releases']['release'][$prev_index]['version'];
      if (version_compare($prev_version, $release['version']) === -1) {
        $info['latest'][$stability] = $r;
      }
    }
  }

  return $info;
}

/**
 * @param DOMNode $node
 *
 * @param array $info
 * @param array $parents
 */
function _drupalorg_scraper_release_history_parse(DOMNode $node, array &$info, array $parents) {
  $collections = array(
    'terms/term',
    'releases/release',
    'releases/release/*/files/file',
    'releases/release/*/terms/term',
  );
  switch ($node->nodeType) {
    case XML_ELEMENT_NODE:
      if ($node->childNodes->length === 1
        && $node->childNodes->item(0)->nodeName === '#text'
        && $node->childNodes->item(0)->nodeType === XML_TEXT_NODE
      ) {
        $info[$node->nodeName] = $node->childNodes->item(0)->textContent;

        return;
      }

      $parents[] = $node->nodeName;
      $parents_path = implode('/', $parents);
      if (in_array($parents_path, $collections)) {
        $parents[] = '*';
        $index = isset($info[$node->nodeName]) ? count($info[$node->nodeName]) : 0;
        $info[$node->nodeName][$index] = array();
        for ($i = 0; $i < $node->childNodes->length; $i++) {
          _drupalorg_scraper_release_history_parse(
            $node->childNodes->item($i),
            $info[$node->nodeName][$index],
            $parents
          );
        }
      }
      else {
        $info[$node->nodeName] = array();
        for ($i = 0; $i < $node->childNodes->length; $i++) {
          _drupalorg_scraper_release_history_parse(
            $node->childNodes->item($i),
            $info[$node->nodeName],
            $parents
          );
        }
      }
      break;

  }
}

/**
 * @param array $release
 *
 * @return bool|string
 */
function drupalorg_scraper_release_stability(array $release) {
  if ($release['status'] !== 'published') {
    return FALSE;
  }

  if (isset($release['version_extra'])) {
    return rtrim($release['version_extra'], '0123456789');
  }

  $pattern_m = '/^[1-9]([0-9]*)$/';
  $pattern_o = '/^[0-9]+$/';
  $major = isset($release['version_major']) && preg_match($pattern_m, $release['version_major']);
  $minor = isset($release['version_minor']) && preg_match($pattern_o, $release['version_minor']);
  $patch = isset($release['version_patch']) && preg_match($pattern_o, $release['version_patch']);
  $semantic = $release['version_major'] >= 8;

  return (($semantic && $major && $minor && $patch) || (!$semantic && $major && $patch)) ? 'stable' : FALSE;
}

/**
 * @param array $release
 * @param string $lang_code
 *
 * @return null|string
 */
function drupalorg_scraper_release_translation_url(array $release, $lang_code) {
  if ($release['version_major'] >= 8 || $lang_code === 'en') {
    return NULL;
  }

  return strtr(
    'http://ftp.drupal.org/files/translations/MAJOR.x/drupal/drupal-VERSION.LANG.po',
    array(
      'MAJOR' => $release['version_major'],
      'VERSION' => $release['version'],
      'LANG' => $lang_code,
    )
  );
}

/**
 * @return string
 */
function drupalorg_scraper_release_history_url_base() {
  $project = system_get_info('module', 'system');

  if (module_exists('update')) {
    module_load_include('inc', 'update', 'update.fetch');

    return _update_get_fetch_url_base($project);
  }

  return isset($project['info']['project status url']) ? $project['info']['project status url'] : 'http://updates.drupal.org/release-history';
}

/**
 * Implements theme_drupalorg_scraper_releases().
 */
function theme_drupalorg_scraper_releases(array $vars) {
  $output = '';
  foreach ($vars['releases'] as $release_id => $release) {
    $output .= '<div' . ($vars['highlight'] === $release_id ? ' class="highlight">' : ' class="not-prefered">');

    $output .= l(
      $release['version'],
      $release['download_link'],
      array(
        'external' => TRUE,
        'attributes' => array(
          'class' => array('project-download'),
          'title' => t(
            'Download Drupal @ver', array('@ver' => $release['version_major'])
          ),
          'target' => '_blank',
        ),
      )
    );

    if (!empty($release['translation'])) {
      $output .= l(
        t('Translation'), $release['translation'], array(
          'external' => TRUE,
          'attributes' => array(
            'class' => array('translation-download'),
            'title' => t(
              'Hungarian language package for @ver.x version',
              array('@ver' => $release['version_major'])
            ),
          ),
        )
      );
    }

    $output .= '</div>';
  }

  return $output;
}
