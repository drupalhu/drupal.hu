<?php

/**
 * @file
 * Install, update and uninstall functions for the Drupal.hu module.
 */

/**
 * Implements hook_update_dependencies().
 */
function dhu_update_dependencies() {
  return array(
    'dhu' => array(
      7107 => array(
        'geofield' => 7202,
      ),
    ),
  );
}

/**
 * Implements hook_update_N().
 *
 * Disable modules: geocode.
 */
function dhu_update_7101(&$sandbox) {
  $messages = array();

  $modules_to_disable = array('geocode');
  module_disable($modules_to_disable);
  $messages[] = t('Disable modules: @modules.', array(
      '@modules' => implode(', ', $modules_to_disable),
  ));

  return implode('<br />', $messages);
}

/**
 * Implements hook_update_N().
 */
function dhu_update_7102(&$sandbox) {
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('filename', 'profiles/standard/standard.profile')
    ->execute();

  return t('Issue #1170360 - Undefined index: distribution_name in drupal_install_profile_distribution_name()');
}

/**
 * Implements hook_update_N().
 */
function dhu_update_7103(&$sandbox) {
  //////////////////////////////////
  // Feed API uninstall
  // https://github.com/drupalhu/drupal.hu/issues/76
  //////////////////////////////////

  $tables_to_drop = array('feedapi', 'feedapi_stat', 'feedapi_node_item', 'feedapi_node_item_feed', 'parser_common_syndication');
  foreach ($tables_to_drop as $table) {
    if (db_table_exists($table)) {
      db_drop_table($table);
    }
  }

  // Delete variables site-wide
  variable_del('feedapi_allowed_html_tags');
  variable_del('feedapi_allow_html_all');
  variable_del('feedapi_cron_percentage');

  // Delete variables per-content-type
  $types = db_query('SELECT * FROM {node_type}')->fetchAllAssoc('type', PDO::FETCH_OBJ);
  foreach ($types as $type => $data) {
    variable_del('feedapi_settings_'. $type);
  }

  // Empty parser common syndication cache directory.
  $cache_dir = variable_get('parser_common_syndication_cache', FALSE);
  if (is_dir($cache_dir)) {
    $dp = opendir($cache_dir);
    while (($file = readdir($dp)) !== FALSE) {
      if (is_file($file)) {
        unlink($cache_dir .'/'. $file);
      }
    }
    closedir($dp);
    rmdir($cache_dir);
  }
  variable_del('parser_common_syndication_cache');

  // Empty parser simplepie cache directory
  $cache_dir = variable_get('parser_simplepie_cache', FALSE);
  if (is_dir($cache_dir)) {
    $dp = opendir($cache_dir);
    while (($file = readdir($dp)) !== FALSE) {
      if (is_file($file)) {
        unlink($cache_dir .'/'. $file);
      }
    }
    closedir($dp);
    rmdir($cache_dir);
  }
  variable_del('parser_simplepie_cache');

  // Emtpy global variables
  variable_del('feedapi_settings_feed');
  menu_rebuild();
}

/**
 * Implements hook_update_N().
 */
function dhu_update_7104() {
  $modules_to_enable = array('memcache');
  module_enable($modules_to_enable);
}

/**
 * Enable admin_views module, issue-175.
 */
function dhu_update_7105() {
  $modules_to_enable = array('admin_views');
  module_enable($modules_to_enable);
}
/**
 * Enable the recaptcha module, issue-189.
 */
function dhu_update_7106() {
    $modules_to_enable = array('recaptcha');
      module_enable($modules_to_enable);
}

/**
 * Revert all OpenLayers layers and maps; Enable the "Drupal.hu Event" module.
 */
function dhu_update_7107() {
  $messages = array();

  foreach (openlayers_layers_load() as $layer) {
    openlayers_layer_delete($layer);
  }
  $messages[] = t('All OpenLayers layers has been reverted to default state.');

  foreach (openlayers_maps() as $map) {
    openlayers_map_delete($map);
  }
  $messages[] = t('Revert all OpenLayers maps has been reverted to default state.');

  module_enable(array('dhu_event'));

  return implode('<br />', $messages);
}

/**
 * Rename text formats which have numeric machine-name.
 */
function dhu_update_7108(&$sandbox) {
  $messages = array();

  $format_mapping = array(
    '1' => 'filtered_html',
    '3' => 'full_html',
    '7' => 'plain_text',
  );

  // Foreign keys in tables.
  $table_columns = array(
    'block_custom' => array('format'),
    'filter' => array('format'),
    'filter_format' => array('format'),
    'taxonomy_term_data' => array('format'),
    'users' => array('signature_format'),
    'webform' => array('confirmation_format'),
  );

  $fields = field_info_fields();

  $field_types_with_text_format = array(
    'text' => 'format',
    'text_long' => 'format',
    'text_with_summary' => 'format',
  );

  $table_prefixes = array(
    'CURRENT' => 'field_data',
    'REVISION' => 'field_revision',
  );
  foreach ($fields as $field_name => $field) {
    if (!isset($field_types_with_text_format[$field['type']])) {
      continue;
    }

    if ($field['storage']['type'] === 'field_sql_storage') {
      $column_suffix = $field_types_with_text_format[$field['type']];
      foreach ($table_prefixes as $table_type => $table_prefix) {
        $table_name = "{$table_prefix}_{$field_name}";
        $table_columns[$table_name] = array(
          $field['storage']['details']['sql']["FIELD_LOAD_{$table_type}"][$table_name][$column_suffix],
        );
      }
    }
  }

  foreach ($table_columns as $table_name => $columns) {
    foreach ($columns as $column) {
      foreach ($format_mapping as $format_id => $format_name) {
        db_update($table_name)
          ->fields(array($column => $format_name))
          ->condition($column, $format_id)
          ->isNotNull($column)
          ->execute();
      }
    }
  }

  // Update variables.
  $var_names = array(
    'filter_default_format',
    'filter_fallback_format',
    'format',
  );
  foreach ($var_names as $var_name) {
    $format_id = variable_get($var_name, NULL);
    if ($format_id && isset($format_mapping[$format_id])) {
      variable_set($var_name, $format_mapping[$format_id]);
    }
  }

  /** @var view $view */
  foreach (views_get_all_views() as $view) {
    if ($view->export_type !== EXPORT_IN_DATABASE) {
      continue;
    }

    $changed = FALSE;
    foreach ($view->display as $view_display) {
      foreach (array('header', 'footer', 'empty') as $area) {
        $display_option = "{$area}_format";
        if (!empty($view_display->display_options[$display_option])) {
          $format_id = $view_display->display_options[$display_option];
          if (isset($format_mapping[$format_id])) {
            $view_display->display_options[$display_option] = $format_mapping[$format_id];
            $changed = TRUE;
          }
        }

        foreach (array('area', 'text') as $area_type) {
          if (!empty($view_display->display_options[$area][$area_type]['format'])) {
            $format_id = $view_display->display_options[$area][$area_type]['format'];
            if (isset($format_mapping[$format_id])) {
              $view_display->display_options[$area][$area_type]['format'] = $format_mapping[$format_id];
              $changed = TRUE;
            }
          }
        }
      }
    }

    if ($changed) {
      $view->save();
    }
  }

  return implode((drupal_is_cli() ? PHP_EOL : '<br />'), $messages);
}
